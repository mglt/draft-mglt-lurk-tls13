---
title: LURK Extension version 1 for (D)TLS 1.3 Authentication
abbrev: LURK/TLS 1.3
docname: draft-mglt-lurk-tls13-00


area: Security
wg: LURK
kw: Internet-Draft
cat: std

coding: us-ascii
pi:
  rfcedstyle: yes
  toc: yes
  tocindent: yes
  sortrefs: yes
  symrefs: yes
  strict: yes
  comments: yes
  inline: yes
  docmapping: yes

author:
      -
        ins: D. Migault
        name: Daniel Migault
        org: Ericsson
        street: 8275 Trans Canada Route
        city: Saint Laurent, QC
        code: 4S 0B6
        country: Canada
        email: daniel.migault@ericsson.com


--- abstract

This document describes the LURK Extension 'tls13' which enables
interactions between a LURK Client and a LURK Server in a context of
authentication with (D)TLS 1.3.

--- middle


# Introduction {#sec-intro}

This document defines a LURK extension for TLS 1.3 {{!RFC8446}}. 

This document assumes the reader is familiar with TLS 1.3 the LURK
architecture {{?I-D.mglt-lurk-lurk}}. 

The motivations for the LURK Extension TLS 1.3 are similar to those for
the LURK extension of TLS 1.2 {{?I-D.mglt-lurk-tls12}} and the LURK use
cases {{?draft-mglt-lurk-use-cases}}.   

Interactions with the Cryptographic Service can be performed by the TLS
Client as well as by the TLS Server. 

LURK defines an interface to a Cryptographic Service that stores the
security credentials. These credentials are
typically involved in authentication messages and include the PSK used
in a PSK or PSK-ECDHE authentication or the key
used for signing  in an ECDHE authentication. As in the case of session
resumption the PSK is derived from the resumption_master_secret during
the key schedule {{!RFC8446}} section 7.1, these secret requires similar
protection as well.

# Protocol overview

This document describes the interactions between a LURK client and a
Cryptographic Service. Both of them can be hosted on a TLS server or a
TLS client.

The purpose of the Cryptographic Service is to provide the LURK the
necessary material to complete the handshake while protecting the
security credentials. The necessary material includes the different
secrets generated by the key schedule of {{!RFC8446}} section 7.1 as
well as signing operations. Secrets are generated on partial
Handshake Context, and are necessary to mov ethe TLS handshake forward.
As a result, secrets and signing operations are requested at various
point in the TLS Handshake.  

This is a major change to TLS 1.2 where all necessary information could
be retrieved in one exchange. In addition to multiple exchanges, this
requires the management of a sequence of exchanges between the Lurk
client and the Cryptographic Service. 





# LURK Header {#sec-lurk-tls-header}

LURK / TLS 1.3 is a LURK Extension that introduces a new designation
"tls13". This document assumes that Extension is defined with
designation set to "tls13" and version set to 1. The LURK Extension
extends the LURKHeader structure defined in {{?I-D.mglt-lurk-lurk}} as
follows:

~~~
enum {
    tls13 (2), (255)
} Designation;

enum {
   capabilities(0), ping(1), binder_key(2),
   early_secrets(3), handshake_and_app_secrets(4),
   handshake_secrets(5), app_secrets(6), init_certificate_verify(7),
   certificate_verify(8), post_handshake(9),
   new_session_ticket(10), register_session_ticket(11) (255)
}TLS13Type;


enum {
    // generic values reserved or aligned with the
    // LURK Protocol
    request (0), success (1), undefined_error (2),
    invalid_payload_format (3),

    //code points for ecdhe authentication
}TLS13Status

struct {
     Designation designation = "tls13";
     int8 version = 1;
} Extension;

struct {
    Extension extension;
    select( Extension ){
        case ("tls13", 1):
            TLS13Type;
    } type;
    select( Extension ){
        case ("tls13", 1):
            TLS13Status;
    } status;
    uint64 id;
    unint32 length;
} LURKHeader;
~~~


# Exchange Description 

The sequence of exchanges between the LURK client and the Cryptographic
Service is determine by the policies of the TLS client and the TLS
server. The policies on the TLS client will determine the proposed
capabilities to the TLS server, such policies will be reflected on
Cryptographic Service in term of necessary secrets and signing
operations to implement such capabilities. The requests of secrets or
signing operation determine the specific exchanges. Similarly, on the
TLS server side, the TLS server policies takes the TLS client
capabilities as inputs and determines the necessary secrets and signing
operations to implement such policies. As for the TLS client, the
various combination of necessary secrets and signing operations
determines the exchanges between the LURK client and the Cryptographic
Service. 

The Cryptographic Service is not expected to perform any policies such
as choosing the appropriated authentication method. Such choices are
performed by the LURK client. We expect that the logic of the LURK
client by solely configured by the security credentials and the
following parameters:

role:
defines if LURK exchanges happen on a TLS client or a TLS server.

session_resumption:
is optional and is set when the TLS server provides session resumption
or when the TLS client wants to perform session resumption. By default
it is set. The motivation for having this parameter is to prevent the
Cryptographic Service to deal with NewSessionTickets when no session
resumption is used. 

## Message Exchange Description

The exchanges between the LURK client and the Cryptographic Service are
designated as exchange and are constituted by a TLS13Request and a
TLS13Response.

The purpose of the exchange is:
* to retrieve necessary secrets to derive the necessary keys and proceed
to the TLS handshake
* to perform a signing operation to authenticate both the TLS client or
 the TLS server.  
* to manage NewSessionTickets for future session resumption. The TLS
server will request the generation of NewSessionTickets while the TLS
client register these NewSessionTicket

Except for the post handshake authentication, the request for a signing
operation (init_certificate_verify and certificate_verify exchanges) is
combined to a request for secrets.


~~~
struct {
    select (TLS13Type) {
        case binder_key, early_secrets, app_secrets:
            LurkEarlySecretRequest;
        case handshake_and_app_secrets, handshake_secret:
            LurkHandshakeSecretRequest
        case init_certificate_verify, cerificate_verify:
            LurkCertificateVerifyRequest;
        case post_handshake: LurkPostHandshakeRequest
        case new_session_ticket:  LurkNewSessionTicketRequest;
        case register_session_ticket: LurkRegisterSessionTicketRequest;
    };
} TLS13Request;


struct {
    select (TLS13Type) {
        case binder_key, early_secrets, handshake_and_app_secrets,
            handshake_secrets, app_secrets: LurkSecretResponse;
        case init_certificate_verify, certificate_verify, post_handshake:
            LurkCertificateVerifyResponse;
        case new_session_ticket:  LurkNewSessionTicketResponse;
        case register_session_ticket: LurkRegisterSessionTicketResponse;
    };
}; TLS13Response
~~~

## Key Schedule Context Request 

The LURK client and the Cryptographic proceeds to a sequence of
exchanges and the coherence between them is controlled through a key
schedule context (ks_ctx). This context is agreed between the LURK
client during the first exchange of a Context ID exchange of types
init_client, init_server. The remaining exchanges have a Context ID of
type opaque that indicates the negotiated session_id and a cookie that
is unpredictable for a passive attacker. When a Context ID of type
opaque is used by the LURK client, the Cryptographic does not return any
Context ID. 

To establish a session with the Cryptographic Service, the LURK client
provides a ContextID type of type init_client. The LURK client specifies
if there is a specific PSK to initiate the key schedule. If a PSK is
indicated the Cryptographic checks the PSK is available. In case the PSK
is not available, an invalid_psk error is returned. If the PSK is not
provided, a default PSK is generated as described in {{!RFC8446}}
section 7.1. If the default PSK is not allowed then an invalid PSK is
returned. The LURK client also specifies the freshness_funct used to
provide perfect forward secrecy as defined in {{sec:pfs}}. If the
Cryptographic Service does not support the freshness_funct, an
invalid_freshness_funct error is returned. The LURK client also adds
h_opaque which is the hash function used to generate the future cookies.
If the Cryptographic Service does not support h_opaque an
invalid_h_opaque error is returned. 

Upon receiving a ContextID of type init_client, the Cryptographic
Service responds with a ContextID of type init_server whihc contains a
session_id used by the Cryptographic Service to identify the session
between the LURK client and the Cryptographic Service. The LURK client
is expected to include this session_id into the future ContextID of type
opaque. 

Upon receiving a ContextID of type opaque, the Cryptographic associates
the initiated key scheduler context using the session_id and check the
value of cookie as defined in {{sec:cookie}}. If a mismatch occurs the
Cryptographic Service MAY discard the request or respond with a
invalid_request.  The binding between the ContextID type and the
TLS13Request type is mentioned below. 


Upon receiving a ContextID type that is not supported, the Cryptographic
Service returns an invalid_ctx_type.

The table below represents the compatible exchange with Context ID
types. init indicates the the TLS13REquest has a Context ID type set to
init_client while the TLS13Response has a Context ID type set to
init_server.

On the TLS server side, a session is initiated by the early_secret when
the TLS server needs one of the early secrets. The TLS server may need
the binder_key when a PSK or PSK-ECDHE authentication is proposed in the
ClientHello message and the TLS server selects one of these PSK.   
When the TLS server proceeds to ECDHE authentication, then the session
is initiated with a init_certificate_verify.

On the TLS client side, a session may be initiated by a binder_key when
PSK or PSK-ECDHE authentication is proposed or handshake_secret when
only ECDHE authentication is proposed.  

~~~
+--------+--------------------------+--------------+
|  Role  | exchange                 | ctx_id_type  |
+--------+--------------------------+--------------+
| server | early_secret             | init         |
| server | init_certificate_verify  | init         |
| server | handshake_and_app_secret | opaque       | 
| server | new_session_ticket       | opaque       |
| client | binder_key               | init         |
| client | early_secret             | opaque       | 
| client | handshake_secret         | init /opaque |
| client | app_secret               | opaque       | 
| client | certificate_verify       | opaque       |
| client | register_session_ticket  | opaque       |
| client | post_handshake           | opaque       |
+--------+--------------------------+--------------+
~~~

~~~
enum { init_request(0), init_response(1),  opaque(2), 255 } ContextIDType
enum { false(0), true(1) 255 } HasPSK



struct {
    ContextType ctx_type
    select(ctx_type) {
       case init_client:
           HasPSK has_psk
           select(has_psk) {
               case true: PskIdentity psk_id; //RFC8446 section 4.2.11
            }
           PFSAlgorithm freshness_funct;  // {{!I-D.mglt-lurk-tls12}} section 4.1
           PFSAlgorithm h_opaque;
       case opaque:
           unint32 session_id;
           unint32 cookie;
    };
} ContextID;

struct {
    select(ContextIDRequest.ctx_type) {
        case init_request:
            ContextType ctx_type  // init_response
            uint32 session_id
    };
} ContextIDResponse
~~~

### Perfect Forward Secrecy {#sec:pfs}

Perfect forward secrecy is implemented in a similar manner as with the
TLS 1.2 extension described in {{?draft-mglt-lurk-tls12}} section 4.1.1.
As ServerHello.random in TLS 1.3 do not include time, it is not
considered here. In addition, we use a specific context related to TLS
1.3. 

As a result, the ServerHello.random is generated as follows on the TLS
server. 

~~~
ServerHello.random = freshness_funct( server_random + "tls13 pfs srv" );
~~~

The ClientHello.random is generated as follows on the TLS client side:

~~~
ClientHello.random = freshness_funct( server_random + "tls13 pfs clt" );
~~~


Perfect forward secrecy applies to the ServerHello.random on the TLS
server and on the ClientHello.random on the TLS client. As a result, PFS
is provided on the TLS server as long as the ServerHello is part of the
Handshake Context. Similarly PFS is provided on the TLS client as long
as ClientHello is part of the Handshake Context. On the TLS server,
early_secret exchange do not have the ServerHello so this exchange is
not protected by PFS later exchanges are. On teh TLS client side,
binder_key does not have any Handshake Context so this exchange is not
protected by PFS. Later exchanges are. 

### Cookie {#sec:cookie}

The cookie mechanism is intended to prevent an attacker to perform an
exchange within a session established between the LURK client and the
Cryptographic Service. Cookies of the next TLS13Requests are generated
as follows:

~~~
cookie_0 = session_id
cookie_n+1 = HKDF-Expand-Label(TLS13Request,
                        "cookies", cookie_n, Hash.length)
~~~

The 32 most significant bits are sent and Hash is designated by
h_opaque. The LURK client starts with cookie_0. 

When the Cryptographic Service does not receive the expected cookie, the
request is discarded or an invalid_request error is sent.

## Secret Request and SecretResponse

Secrets are derived from the key schedule of {{!RFC8446}} section 7.1.
The derivation of secrets does not requires the same inputs. In our case
binder_key, client_early_traffic_secret server_early_traffic_secret and
early_exporter_master_secre are designated as early sercrets. Their
derivation requires the PSK and except for the binder_key some Handshake
Context. client_handshake_traffic_secret, and
server_handshake_traffic_secret are designated as handshake secrets and
secrets processed further are designated as application secrets. Both
handshake and application secrets requires the additional ECDHE share
secret as well as a specific Handshake Context. 

The request to generate secrets from the LURK client is performed via
the EarlySecretsRequest and HandshakeSecretRequest. 

The PSK is provided in the EarlySecretRequest via the Context ID of type
init_id. The value is then stored in a key schedule context (ks_ctx) and
use for further secrets.  When ECDHE share secret needs to be provided
for handshake and application secret the Ephemeral Secret is provided so
the Cryptographic Service can derive the ECDHE share secret. The public
part would be taken from the Handshake Context.  For each request the
secrets are specified using key_request and the specific Context
Handshake is specified via handshake_context. The Handshake Context is
also stored in the key schedule context (ks_ctx) to avoid the lURK
client sending multiple time the same data.   

~~~
struct {
    uint16 key_request;
    Handshake handshake_context<0..2^32> //RFC8446 section 4.
} EarlySecretsRequest;

EphemeralSecret{

}

struct {
    SecretsRequest secret_request;
    EphemeralSecret ephemeral_secret;
} HandshakeSecretRequest;

struct {
    Secret secret_list<0..2^16-1>;
} SecretsResponse;
~~~

ctx_id:
initializes the key schedule context of the Cryptographic Service and
set the PSK when set to type init_id. For future exchange the ctx_id
enforces the origin and appropriate sequence of requests. (see section
{{sec:ctx_id}})

key_request:
designates the requested secrets (see section {{sec:key_request}}).

handshake_context: 
the necessary messages so the Cryptographic Service is aware of the
appropriated Handshake Context to generate the secrets (see section
{{sec:handshake_context}}).

ephemeral_secrets:
private part of the ECDHE using PKCS10 format.

secret_list:
the list of requested secrets (see section {{sec:secrets}}.

## Signing Request and Response 

The signature requires the signature scheme (sig_algo), the designated
private key (key_id), as well as sufficient context to generate the
necessary data to be signed. In our case the necessary context is
provided by the LURKCertificate, assuming the Cryptographic Service will
have the necessary Handshake Context. The latest may be provided in a
combination of a secret request. 

key_id is processed as described in {{?draft-mglt-lurk-tls12}} section
4.1. If the Cryptographic Service does not support the KeyPairIdType an
invalid_key_id_type is returned. If the Cryptographic Service does not
recognize the key, an invalid_key_id error is returned.  

sig_algo designates the signature algorithm scheme, and it is defined in
{{!RFC8446} section 4.2.3. When the Cryptographic Service does not
support the signature scheme an invalid_signature_scheme error is
returned. 

The certificate is a public data that may repeat over multiple distinct
TLS handsahkes. To limit the load of unnecessary information being
transmitted multiple times, the LURKCertificate enable to carry the
index of the Certificate structure rather than the structure itself.
When the lurk_certificate_type is set to sha256_32, the index of the
Certificate structure is sent. The current specification generates the
index using sha256_32 as defined in {{?draft-mglt-lurk-tls12}}, that is
the first 32 bits of the hash of the Certificate structure using SHA256
as the hashing function. When lurk_certificate_type is set to tls13 the
Certificate structure is expected. When the Cryptographic Service does
not support the certificate_type, an invalid_certificate_type error is
returned. When the Certificate structure does not match the private key,
an invalid_certificate error is returned. 

Signing operations are described in {{!RFC8446}} section 4.4.3. The
context string is derived from the role and the type of the TLS13Request
as described below. The Handshake Context is taken from the key schedule
context.   

~~~
+--------+-------------------------+-------------------------------------+
| role   | type                    | context                             |
+--------+-------------------------+-------------------------------------+
| server | init_certificate_verify | "TLS 1.3, server CertificateVerify" |
| client | certificate_verify      | "TLS 1.3, client CertificateVerify" |
+--------+-------------------------+-------------------------------------+
~~~

The Cryptographic Service computes the signature as described in
{{!RFC8446}} section 4.4.3. and returns signature in SigningResponse.
When the Cryptographic Service does not have the necessary Handshake
Context, context or is unable to proceeds to the signing operation, an
invalid_certificate_verify error is returned. 


~~~
enum { tls13(0), sha256_32(1) (255)}; LURKCertificateType

struct {
    lurk_certificate_type;
    select (lurk_certificate_type) {
        case sha256_32:
            uint32 hash_cert;
        case tls13:
            Certificate tls13_certificate; // RFC8446 section 4.4.2
    };
} LURKCertificate;




struct {
    KeyPairId key_id; // draft-mglt-lurk-tls12 section 4.1
    SignatureScheme sig_algo; //RFC8446 section 4.2.3.
    LURKCertificate certificate; 
} SigningRequest;


struct {
    opaque signature<0..2^16-1>; //RFC8446 section 4.4.3.
} SigningResponse; 
~~~




## key_request {#key_request}

The requested secrets are requested via key_request. While the
structure is generic for multiple exchange, the LURK client is expected
to only request a subset of secrets. This is interpreted as expectation
from the LURK client and the TLS applies restrictions based on its
configuration and key schedule handshake. Expected secrets and
acceptable secrets are defined for each exchange. The current structure
of key_request is defined below:   
* bit 0 : binder_key
* bit 1 : client_early_traffic_secret
* bit 2 : early_exporter_master_secret 
* bit 3 : client_handshake_traffic_secret
* bit 4 : server_handshake_traffic_secret
* bit 5 : client_application_traffic_secret_0
* bit 6 : server_application_traffic_secret_0
* bit 7 : exporter_master_secret
* bit 8-15: reserved and set to zero


## secret {#secret}


~~~
enum {
    binder_key (0),
    client_early_traffic_secret(1),
    early_exporter_master_secret(2),
    client_handshake_traffic_secret(3),
    server_handshake_traffic_secret(4),
    client_application_traffic_secret_0(5),
    server_application_traffic_secret_0(6),
    exporter_master_secret(7)
    (255)
} SecretType;

struct {
    SecretType secret_type;
    opaque secret_data<0..2^8-1>;
} Secret;
~~~



## handshake_context



The secrets generated by the Cryptographic Service are also limited by
the capabilities of the TLS client or TLS server. In some cases, such
capabilities are restricted by configuration and in other cases, these
are based on the capabilities announced by the TLS client (ClientHello)
as well as chosen by the TLS server (ServerHello). 

Parameters that are expected to restrict the generated secrets:

early_exporter:
is set when the application uses exporters in 0-RTT. This
application specific. When set 0rtt MUST be set and
early_exporter_master_secret is provided to the application. By default,
early_exp is unset. 

application:
is set when the application carries the application data over the TLS
session. TLS is not only used as an handshake protocol. By default
application is set.

exporter:
is set when the application is uses exporter. This is application
specific. When set, exporter_master_secret is returned to the
application. By default, exporter is unset.

Parameters that are announced by the TLS client:

psk_proposed :
The received or to be formed ClientHello contains a pre_shared_key and psk_key_exchange_modes extensions.

dhe_proposed:
The received or to be formed ClientHello contains a key_share extensions.

0rtt_proposed:
The received or to be formed ClientHello contains a early_data extension.

post_handshake_proposed:
The received or to be formed ClientHello contains a post_handshake_auth extension.





is defined by a state diagram defined for the
LURK client and the Cryptographic Service respectively located on the
TLS client and the TLS server. Each entity maintains the various key
schedule context (ks_ctx) which among other contains the necessary
information about the next request to be performed (resp. accepted). To
ensure the appropriated ordering of the request from the legitimate LURK
client, a ctx_id of type opaque is deterministacaly generated by both
parts but is unpredictable from a passive observer. This context is
removed when the entity is in a finished state.  


As the interaction between the LURK client and the Cryptographic Service
follows the TLS handshake, the different state diagrams indicates the
TLS handshake message that triggers the LURK exchange or the TLS
handshake message that can be sent after the LURK exchange. The
parameters that are belongs to the configuration of the TLS client or
TLS server is mentioned in capital letters. The exchange is indicated
by the type of the request. 


The Cryptographic Service contains three databases:

CTX_ID_DB:
database that contains the valid ctx_id of type opaque.

PSK_DB:
contains the list of PSKs, with associated parameters such as
Hash function. This database includes the session resumption tickets.

Key_DB:
contains the asymetric signing keys with supported signing
algorithms.

# State diagrams

## TLS client: LURK client

~~~
              TLS Client Policy for authentication
              PSK, PSK-ECDHE                    ECDHE
                       |                           |
                       |                           |
                       v                           |
  psk  ---> +--------------------+                 |
            | binder_key         |                 |
            +--------------------+                 |
EARLY_EXPORTER, 0-RTT  |                           |
                v      |                           |
            /------------------------\ NO          |
            \------------------------/----+        |
                   YES v                  |        |
            +--------------------+        |        |
            |   early_secret     |        |        |
            +--------------------+        |        |
ClientHello            |                  |        |
<----                  +<-----------------+--------+
ServerHello        YES v
      ----> +--------------------+
            | handshake_secret   |
            +--------------------+
                       |
            /--------------------\ NO
            | CertificateRequest |------+
            \--------------------/      |
                   YES v                v
            +--------------------+-----------------+
            | certificate_verify |    app_secret   |
            +--------------------+-----------------+
                    |                     |
client Finished     +------+--------------+
<----                      |
                           v
             /-------------------------\ NO
             | post_handshake_proposed |------+
             \-------------------------/      |
                       YES v                  |
           +-----------------------------+    |
           | register_session_tickets    |    |
           | (empty NewSessionTickets)   |    |
           +-----------------------------+    |
                           |                  |
                           +<-----------------+
                           |
                           +<------------------------------------------------------------------------+
                           |                                                                         |
                           +---------------------------------------------------+                     |
client Finished            v                                                   v                     |
NewSessionTickets /--------------------\ NO     CertificateRequest  /-------------------------\ NO   |
            ----> | session_resumption |----------+           ----> | post_handshake_proposed |----+ |
                  \--------------------/          |                 \-------------------------/    | |
                            YES v                 |                        YES v                   | |
                  +-----------------------------+ |                 +-------------------------+    | |
                  |  register_session_ticket    | |                 |     post_handshake      |    | |
                  +-----------------------------+ |                 +-------------------------+    | |
                                v                 v                             v                  | |
                                +-----------------+----------+------------------+------------------+ |
                                                             v                                       |
                                                    /--------------------\ NO                        |
                                                    |      finished      |---------------------------+
                                                    \--------------------/
                                                          YES v
                                                 +-------------------------+
                                                 | LURK exchanges Finished |
                                                 +-------------------------+
~~~

## TLS client: Cryptographic Service

~~~
       TLS13Request
             |
(PSK,        +<------------------------------------------------------------------------------------+
PSK-ECDHE)   |                              (ECDHE)                                                |
/---------------------------\    /---------------------------\    /--------------------------\     |
| type is binder_key        | NO | type is handshake_secret_ | NO | type is (early_secret or |     |
| and ctx_type is init_id   |--->| and ctx_type is init_id   |--->| handshake_secret or app_ |     |
|                           |    |                           |    | secret or certificate_   |     |
|                           |    |                           |    | verify or register_      |     |
|                           |    |                           |    | session_ticket or post_  |     |
|                           |    |                           |    | handshake                |     |
|                           |    |                           |    | and ctx_type is opaque   |     |
\---------------------------/    \---------------------------/    \--------------------------/     |
             |                              |                            YES v                     |
             |                              |                     /--------------------------\NO   |
             |                              |                     | type is (certificate_    |     |
             |                              |                     | verify or post_handshake)|---+ |
             |                              |                     \--------------------------/   | |
             |                              |                            YES v                   | |
             |                              |                     /--------------------------\NO | |
             |                              |                     | type is register_session_|   | |
             |                              |                     | ticket and               |   v |
             |                              |                     | session_resumption       |---+ |
             |                              |                     \--------------------------/   | |
        YES  v                         YES  v                            YES v                   | |
/---------------------------\NO  /---------------------------\NO  /--------------------------\NO | |
| psk_proposed              |--+ | dhe_proposed              |--+ | ctx_id in CTX_ID_DB      |---+ |
| psk_key in PSK_DB         |  | \---------------------------/  v \--------------------------/   v |
\---------------------------/  +------------|-------------------+------------|-------------------+ |
             |                          YES |      +-------+    |        YES v                     |
             +------------------------------+      | Error |<---+ /--------------------------\     |
         YES v                                     +-------+      | ks_ctx is pending        |---+ |
+---------------------------+                                     \--------------------------/   | |
| Init key schedule context |                                            YES v                   | |
+---------------------------+                                     +----------------------------+ | |
             v                                                    |  ks_ctx.state=selected     | | |
+---------------------------+                                     |(del related pending ks_ctx)| | |
| state=pending             |                                     +----------------------------+ | |
| set psk_proposed,         |                                                |                   | |
| set dhe_proposed,         |                                                +<------------------+ |
| 0rtt_proposed             |                                                |                     |
| post_handshake_proposed   |                                                |                     |
+---------------------------+                                                |                     |
             |                                                               |                     |
             +<--------------------------------------------------------------+                     |
             v                                                                                     |
/---------------------------\                                                                      |
| TLS13request.type in      |                                                                      |
| ks_ctx.next_request       |                                                                      |
\---------------------------/                                                                      |
             v                                                                                     |
+---------------------------+                                                                      |
| process TLS13Request      |                                                                      |
| update CTX_ID_DB, key     |                                                                      |
| schedule context, PSK_DB  |                                                                      |
+---------------------------+                                                                      |
             v                                                                                     |
/---------------------------\ NO                                                                   |
| finished                  |----------------------------------------------------------------------+
\---------------------------/
         YES v
+---------------------------+
| delete ks_ctx             |
+---------------------------+

~~~

## TLS server: LURK client


~~~
                 TLS Server Policy for authentication
received      PSK, PSK-ECDHE,                   ECDHE
ClientHello            |                          |
      ---->            v                          v
  psk  ---->+----------------------+    +----------------------+
            | Init ks_ctx          |    | Init ks_ctx          |
            +----------------------+    +----------------------+
                       v                           |
            +---------------------+                |
            | early_secret        |                |
            +---------------------+                |
                       |                           |
to be formed       YES v                           v
ServerHello +--------------------------+   +-------------------------+
      ----> | handshake_and_app_secret |   | init_certificate_verify |
            +--------------------------+   +-------------------------+
                       |                           |
   SESSION RESUMPTION  +---------------------------+
               |       |
ServerHello    v       v
      <---- /--------------------\ NO
            | session_resumption |------+
            \--------------------/      |
                 YES |                  |
                     +----------------+ |
client               v                | |
Finished    +----------------------+  | |
or    ----> | new_session_tickets  |  | |
other       +----------------------+  | |
trigger              v                | |
            /--------------------\ NO | |
            |      finished      |----+ |
            \--------------------/      |
                 YES v                  v
            +----------------------------------+
            |      LURK exchanges Finished     |
            +----------------------------------+
~~~



## TLS server: Cryptographic Service


~~~
        TLS13Request
             |
(PSK,        +<------------------------------------------------------------------------------------+
PSK-ECDHE)   |                              ECDHE                                                  |
/---------------------------\    /---------------------------\    /--------------------------\     |
| type is early_secret and  | NO | type is init_cert_verify_ | NO | type is (handshake or    |     |
| and ctx_type is init_id   |--->| and ctx_type is  init_id  |--->| handshake_and_app_secret |     |
| and psk_proposed          |    |                           |    | or new_session_ticket)   |     |
|                           |    |                           |    | and ctx_type is opaque   |     |
\---------------------------/    \---------------------------/    \--------------------------/     |
        YES  v                         YES  |                            YES v                     |
/---------------------------\NO +-----+     |                     /--------------------------\NO   |
| psk in PSK_DB             |-->|Error|     |                     | ctx_id in CTX_ID_DB      |---+ |
\---------------------------/   +-----+     |                     \--------------------------/   v |
             |                              |                            YES v                     |
             +<-----------------------------+                     /--------------------------\     |
         YES v                                                    | ks_ctx is pending        |---+ |
+---------------------------+                                     \--------------------------/   | |
| Init key schedule context |                                            YES v                   | |
+---------------------------+                                     +----------------------------+ | |
             v                                                    |  ks_ctx.state=selected     | | |
+---------------------------+                                     |(del related pending ks_ctx)| | |
| state=pending             |                                     +----------------------------+ | |
| set psk_proposed,         |                                                |                   | |
| set dhe_proposed,         |                                                +<------------------+ |
| 0rtt_proposed             |                                                |                     |
| post_handshake_proposed   |                                                |                     |
+---------------------------+                                                |                     |
             |                                                               |                     |
             +<--------------------------------------------------------------+                     |
             v                                                                                     |
/---------------------------\ NO +-------+                                                         |
| TLS13request.type in      |--->| ERROR |                                                         |
| ks_ctx.next_request       |    +-------+                                                         |
\---------------------------/                                                                      |
         YES v                                                                                     |
+---------------------------+                                                                      |
| process TLS13Request      |                                                                      |
+---------------------------+                                                                      |
             v                                                                                     |
/---------------------------\ NO +------------------+                                              |
| finished                  |--->| update CTX_ID_DB |----------------------------------------------+
\---------------------------/    | update ks_ctx    |
         YES v                   +------------------+
+---------------------------+
| update CTX_ID_DB, PSK_DB  |
| delete ks_tcx             |
+---------------------------+
~~~


# Message Description

The different exchanges between the LURK client and the Cryptographic
Service can fall into three categories:
* Retrieving secrets with eventually signing operations. Such exchanges
occurs during the TLS handshake 
* Session ticket management: request for NewSessionTickets or to
register NewSessionTickets
* Post Handshake

Interactions between the LURK client and the Cryptographic Service is
represented by a sequence of request. The purpose of the ctx_id is to
initiate the sequence with a type of init_id or to assert the request is
legitimate with ctx_id of type opaque. 



The generation of secrets requires inputs such as PSK, ECDHE share
secret as well as Handshake Context. PSK is provided within the ctx_id
of type init_id. Other parameters are provided as available or
necessary. Handshake Context is provided via the handshake_context, and
ECDHE secret are provided via the ephemeral_secret combined with the
public value available in the handshake_context.

The signing operation is also associated to a Handshake Context
(handshake_context, certificate) as well as the private key used to perform the
signing operation (key_id). In addition, signing operations may also be
combined with secret generation (init_certificate_verify).








struct {
    HandshakeSecretsRequest handshake_request;
} CertificateVerifyRequest;


struct {
    SecretsResponse secret_response;
    opaque signature<0..2^16-1>; //RFC8446 section 4.4.3.
    Finished finished;            // RFC8446 section 4.4.4.
} CertificateVerifyResponse;


struct {
    ContextID ctx_id;
    uint8 ticket_nbr;
    Handshake handshake_context<0..2^32> //RFC8446 section 4.
} NewSessionTicketRequest;

struct {
    NewSessionTicket ticket_list<0..2^16-1>; //RFC8446 section 4.6.1.
} NewSessionTicketResponse;

struct {
    ContextID ctx_id;
    Handshake handshake_context<0..2^32>;     //RFC8446 section 4.
    NewSessionTicket ticket_list<0..2^16-1>; //RFC8446 section 4.6.1.
} RegisterSessionTicketRequest;

struct {} RegisterSessionTicketResponse;

struct {
    ContextID ctx_id;
    Handshake handshake_context<0..2^32>;     //RFC8446 section 4.
    int16 app_n;
} PostHandshakeRequest;

~~~

# TLS server

## early_secret

## 


# TLS client

## early_secret



# handshake_server_key

This exchange is only expected to be performed by a TLS Client. The
server_handshake_key is necessary for the TLS Client to decrypt the
handshake message/extensions encrypted by the TLS Server. 

Interaction with a Cryptographic Service is required when the PSK is
protected by the Cryptographic Service. 

TLS 1.3 defines various key exchange modes (ke_mode): (EC)DHE (dhe_ke) as well as
modes that involves a PSK, PSK-only (psk_ke) and PSK in combination of
(EC)DHE (psk_dhe_ke). psk_dhe and psk_ke are defined in {{!RFC8446}}
section 4.2.9 in the PskKeyExchangeMode structure. dhe_ke corresponds to
the absence of that structure. 


## Request Payload {#hsk-req}
~~~

enum { sha256 (0), (255) } TranscriptHash; 

enum { psk_raw (0), psk_ticket (1), (255) } PSKType;

enum { dhe_ke(0), psk_ke(1), psk_dhe_ke(2) (255)} KeyExchangeMode;

struct {
    PSKType psk_type;
    select( psk_type ){
        case raw_psk :
            opaque raw_psk<0..2^16-1>;
        case identity_psk : 
            OfferedPsks offered_psk  // {{!RFC8446}} section 4.2.11
} PSK

struct {
    select ( ke_mode ){ 
        case psk_ke :
            PSK psk
        case psk_dhe_ke :
            PSK psk
            NamedGroup dh_group; // {{!RFC8446}} section 4.2.7
            opaque dhe_secret<1..2^16-1>;
        case dhe_ke:
            NamedGroup dh_group; // {{!RFC8446}} section 4.2.7
            opaque dhe_secret<1..2^16-1>;
    }
} KeyScheduleInputSecrets 


enum { 
    sha256 (0) (255)
} PFSAlgorithm

struct {
    PFSAlgorithm freshness_funct;  // {{!I-D.mglt-lurk-tls12}} section 4.1
    TranscriptHash h;
    KeyExchangeMode ke_mode // {{!RFC8446}} section 4.2.9
    opaque handshake_context<0..2^32-1>
    KeyScheduleInputSecrets secrets
} HandshakeServerKeyRequest
~~~

psk_type
: indicates how the PSK is provisioned to initiate the key schedule as
described in {{!RFC8446}} section 7.1. The type psk_raw
indicates the PSK is explicitly provided. The type psk_ticket indicates
the PSK is generated from the ticket as described in
{{!RFC8446}} section 4.6.1.

freshness_funct
: the one-way hash function (OWHF) used by LURK to implement
Perfect Forward Secrecy.

h
: the hash function used by the Transcript-Hash {{!RFC8446}}
section 4.4.1.

offered_psk
: reuses the  OfferedPsks described in {{!RFC8446}} section
4.2.11. The PSK structure only allow a single PSK, thus OfferedPsks MUST
represent a single PSK.
  
ke_mode 
: defines pre shared key exchange defined in {{!RFC8446}}
section 4.2.9. It indicates whether the key exchange considers a (EC)DHE key
establishment or not in addition to the PSK. 

dh_group 
: reuses the structure NamedGroup of {{!RFC8446}} section
4.2.7 to indicate the curve or the group used in (EC)DHE key
establishment. 

handshake_context 
: the necessary handshake context to generate the key as described in
{{!RFC8446}} section 7.1. The handshake_context MUST be
ClientHello...ServerHello.

secrets
: the necessary secret inputs (PSK, (EC)DHE) secret necessary for the
key schedule of {{!RFC8446}} section 7.1.


## Response Payload

~~~
struct {
    opaque server_handshake_key<0..2^32-1>
} HandshakeServerKeyResponse
~~~

server_handshake_key
: the server_handshake_key

## LURK Client Behavior {#hsk-clt}


The TLS Client establishing a TLS session with a TLS Server receives
from the TLS Server a ServerHello message with additional encrypted
messages such as the EncryptedExtensions, the Finished as well as the
optional Certificate, CertificateVerify and Application Data message. The
TLS Client needs to retrieve the server_handshake_key in order to
decrypt these messages.  

With ServerHello as the input message, the LURK Client initiates the
exchange as described below:

Perfect Forward Secrecy Setting:

* Perfect Forward Secrecy is performed as described in
{{!I-D.mglt-lurk-tls12}} section 4.1.1 over the client_random. There is
no gmt_unix_time as such ServerHello.random is generated as follows:
~~~
ClientHello.random = freshness_funct( client_random + "tls13_c freshness_funct" );
~~~

Transcript Hash Setting:

* the value for transcript hash is provided by the configuration.

PSK Key Exchange Mode Setting:

* if  the input message does not contains any key_share extension, the
LURK Client sets ke_mode to psk_ke. 
* if  a key_share extension is present the LURK Client sets ke_mode to
psk_dhe_ke. 

Key Schedule Input Secret Setting:

* if the input message  has no pre_shared_key extension, the LURK Client
sets psk_type to psk_raw with a psk of length 0. 
* if the input message has a pre_shared_key extension, the LURK Client
provides the PSK that is not a PSK of zero length, as follows:
..* the PSK is provided explicitly by using the psk_type set to psk_raw
with the explicit value of the PSK. This alternative is NOT RECOMMENDED,
as it means the PSK is not known by the Cryptographic Service and is
known outside this service. It may happen when the TLS Client is
configured with a PSK while the Cryptographic Service is not provisioned with
that PSK. The case where the PSK is provided for a session resumption is
outside the scope of this document as the session_resumption_secret is
never shared outside the Cryptographic Service.
..* the PSK is provided via NewSessionTicket. Upon receiving a
selected_identity in the pre_shared_key extension, the LURK Client
selects the corresponding local_ticket previously provided by the LURK
Server during the previous handshake. local_ticket are internal
structure used by LURK detailled in {{local_ticket}}
 

## LURK Server Behavior {#hsk-srv}

Upon receiving a handshake_server_key request, the LURK server proceeds
as follows:

Perfect Forward Secrecy Check:

* if freshness_funct is not supported, an invalid_freshness_funct erroro is returned. 
* ClientHello.random is generated as described in {{hsk-clt}} and
the value is provided in handshake_context.

Transcript-Hash Check: 

* if h is not a supported transcript-hash
function and invalid_transcript_hash error is returned.

Handshake Check:

* if handshake does not contains a ClientHello...ServerHello an
invalid_handshake error is returned.


PSKExchangeMode Check: 

* if ke_mode is not supported an invalid_ke_mode error is returned.

KeyScheduleInputSecret Check check the validity of the secrets as well
as the coherence wit the pre shared key exchange. These checking
operations are subdivided into (EC)DHE Check and PSK Check operations: 

(EC)DHE Check:

* if ke_mode is set to psk_dhe_ke and secret does not contain a (EC)DHE
secret an invalid_secret error is returned.  
* if the (EC)DHE secret does not match the expected length or the curve
is not supported an invalid_ecdhe_secret error is returned.

PSK Check:

* if the psk type is not supported a invalid_psk_type is returned. 
* if psk_type is psk_raw and the format of the psk is unexpected an
invalid_psk_format error is returned.
* if the psk_type is psk_ticket:

..* if the number of psk or associated binder is more than 1, an
invalid_ticket_format error is returned
..* there is no corresponding identity, an invalid_psk_ticket error is returned. 
* if the psk_type is identity_psk binder_key is generated as described
in {{!RFC8446}} section 7.1.
..* if the binder associated to the psk does not match the one provided
in the offered_psk and invalid_binder error is returned. The binder is
computed as described in {{!RFC8446}} section 4.2.11.2. with
the binder_key generated as described in {{!RFC8446}} section
7.1.

Key Generation:

* server_handshake_key is generated as described in
{{!RFC8446}} section 7.1 and returned to the LURK Client. 


# auth

This exchange provides interactions with a Cryptographic Service both on
the TLS Client side as well as the TLS Server side. 

The pupose of teh exchange is to obtain a CertificateVerify, the
Finished message as well as the necessary keys to encrypt/decrypt the
handshake messages as well as the application data. 

Note the Finished message does not involve any private key nor PSK. As a
result, it does not need to be performed within the Cryptographic
service in order to protect the security credentials. On the other hand,
the Cryptographic Service is responsible to perform the key scheduling
and deliver the 
Cryptographic Service, however, the Cryptographic Service computes the
CertificateVerify message  

## Request Payload {#auth-req}


~~~
enum { server (0), client (1), post-handshake (2) } HandshakeMode; 

struct {
    PFSAlgorithm freshness_funct;  // {{!I-D.mglt-lurk-tls12}} section 4.1
    TranscriptHash h;  // c, f
    KeyExchangeMode ke_mode // {{!RFC8446}} section 4.2.9
    select( ke_mode ){
        case : psk_dhe_ke, dhe_ke
        KeyPairID key_id // {?draft-mglt-lurk-tls12} section 3.
----- KeyID??            Certificate certificate        // {{!RFC8446}} section 4.4.2
            SignatureScheme sig_algo     // {{!RFC8446}} section 4.2.3.
    }
    HandshakeMode handshake_mode        // c, f
    opaque handshake_context<0..2^32-1> // c, f
    KeyScheduleInputSecrets secrets // f
    uint8 key_request
    uint8 ticket_number
} AuthRequest

c: structure used for the CertificateVerify message
f: structure used for the Finished message
~~~

freshness_funct, h, ke_mode, handshake_context and secrets are define in {{hsk-req}}

---certificate 
---: end point certificate defined in {{!RFC8446}} section
---4.4.2.

key_id: 
designation of the private key as defined in {{?draft-mglt-lurk-tls12}}
section 3.

algorithm
: signature algorithm used defined in {{!RFC8446}} section 4.2.3.

handshake_mode
: defines the specific Handshake Context and Base Key necessary to
compute authentication messages as defined in {{!RFC8446}}
section 4.4. The handshake_mode set to server indicates the LURK
exchange is performed by the TLS Server while the handshake_mode set to
client or post-handshake indicates the LURK exchange is performed by the
TLS Client. 

handshake_context 
: Handshake Context has defined in {{!RFC8446}} section 4.4.

key_request
: indicates optional requested keys. The bit is set to 1 to indicate the
key is being requested by the LURK Client.
..* bit 0 : binder_key
..* bit 1 : client_early_traffic_secret
..* bit 2 : early_exporter_master_secret 
..* bit 3 : client_handshake_traffic_secret
..* bit 4 : server_handshake_traffic_secret
..* bit 5 : client_application_traffic_secret_0
..* bit 6 : server_application_traffic_secret_0
..* bit 7 : exporter_master_secret

ticket_number 
: indicates the expected number of session resumption tickets. When
requested by the TLS Client the ticket_number is expected to be 0 or 1.
When requested by the TLS Server the number can be larger. 

## Response Payload

~~~
struct{
    opaque key<0..2^16-1>
} Key 

struct {
    uint8 key_index
    opaque key_list<0..2^32-1>
} Keys

struct {
    Keys keys
    CertificateVerify certificate_verify
    Finished finished
    NewSessionTicket ticket_list<0..2^32-1> 
} AuthResponse
~~~

key_index
: follows the same syntax as key_request in {{auth-req}}.

key_list 
:the list of keys indicated by key_index.

ticket_list 
: list of NewTicketSessions


## LURK Client Behavior (TLS Server) {#auth-clt-srv_tls}

On a TLS Server, the LURK Server initiates the LURK exchange after
receiving the ClientHello from the TLS Client. The purpose of this
exchange is to retrieve the CertificateVerify, Finished, and the
necessary keys to:

* encrypt the EncryptedExtensions, Finished and optional
CertificateRequest Certificate and CertificateVerify message:
server_handshake_traffic_secret
* encrypt the optional Application Data message:
server__application_traffic_secret_N
* decrypt the future Finished or optional Certificate and
CertificateVerify message sent by the TLS Client:
client_handshake_traffic_secret. 
* decrypt the future Application Data message with the 
client__application_traffic_secret_N

Perfect Forward Secrecy Setting:

* Perfect Forward Secrecy is performed as described in
{{!I-D.mglt-lurk-tls12}} section 4.1.1 over the server_random. There is
no gmt_unix_time as such ServerHello.random is generated as follows:
~~~
ServerHello.random = freshness_funct( server_random + "tls13_s freshness_funct" );
~~~


The LURK Client proceeds to the Transcript Hash Setting
PSK Key Exchange Mode Setting and the Key Schedule Input Secret Setting
as described in {{hsk-clt}}. 

Handshake Mode Setting:

* If the LURK Client sets the handshake_mode to "server". 

Handshake Setting:
The handshake is set as described in {{!RFC8446}} section
4.4.

Key Request Setting:

* key_request MUST have the Bit 0 and Bit 1 set to retrieve the
[sender]_handshake_traffic_secret. 
* key_request MUST have the Bit 2 and Bit 3 set to retrieve the
[sender]_application_traffic_secret_N
* Key_request MAY have Bit 4 set if there is a need to use the extractor. 

Upon receiving the AuthResponse, the TLS Server encrypts the messages
and pursue the TLS handshake as defined in {{!RFC8446}}. 


## LURK Client Behavior (TLS Client)

On a TLS Client the LURK Client initiates an AuthRequest in order to
compute the Finished and optional CertificateVerify as well as to
retrieve the necessary keys to:

* encrypt the Finished and optional Certificate and CertificateVerify
message: client_handshake_traffic_secret
* encrypt the optional Application Data message:
server__application_traffic_secret_N
* decrypt the future Application Data message with the
server__application_traffic_secret_N

The TLS Client has decrypted the encrypted handshake messages sent by
the TLS Server by retrieving the server_handshake_traffic_secret with an
HandshakeServerKeyRequest.


The LURK Client proceeds to Perfect Forward Secrecy Setting, Transcript
Hash Setting, Key Schedule Input Secret Setting as described in
{{hsk-clt}}. 

If the TLS Client has received a CertificateRequest from the TLS Server,
the LURK Client:

* sets the ke_mode to psk_dhe_ke. Note that the value is not correlated
to the value agreed psk_key_exchange_modes between the TLS Client and
the TLS Server. Instead it indicates the necessity to generate a
CertificateVerify. 
* provides the Certificate associated to the private key of the TLS


Handshake Mode Setting:

* If the LURK Client is initiating a LURK exchange on behalf of a TLS
Client it sets the handshake_mode to:
..* "client" when the LURK exchange occurs during the TLS handshake.
..* "post-authentication" when the LURK exchange occurs outside the TLS
handshake. 

Handshake Setting:

* set handshake_context as defined in {{!RFC8446}} section 4.4.

Key Request Setting:

* key_request SHOULD have the Bit 0 unset, as
client_handshake_traffic_secret is already known by the TLS Client 
* key_request MUST have the Bit 1 set to retrieve the
server_handshake_traffic_secret. 
* key_request MUST have the Bit 2 and Bit 3 set to retrieve the
[sender]_application_traffic_secret_N
* Key_request MAY have Bit 4 set if there is a need to use the extractor. 

Ticket Number Setting:

* If the TLS Client want to performed further session resumption,
ticket_number is set to 1 and 0 otherwise.


Upon receiving the AuthResponse, the LURK Client has the necessary
information to proceed the TLS handshake.  The ticket_list is a list of
local_ticket. The list MUST have a maximum of one local_ticket. The LURK
Client is expected to manage the local_tickets as described in
{{local_ticket}}


### Local Ticket {#local_ticket}

local_ticket re-uses the NewSessionTicket structure in two different
ways depending if the LURK exchange is initiated by a TLS Client or by a
TLS Server. 

* ticket provided to the TLS Server (by the LURK Server)  are
new_session_ticket, expected to be forwarded to the TLS Client.
* tickets provided to the TLS Client ( by the LURK Server) are
local_ticket. These local_tickets are only expected to be used between
the LURK Client and the LURK Server of the TLS Client.    

During the initial handshake, the TLS Client has received a local_ticket
from the LURK Server and a new_session_ticket from the TLS Server. The
TLS Client updates the  local_ticket as follows:  the ticket_nonce and
extensions fields of the new_session_ticket are copied to the
local_ticket. 

When the TLS Server provides more than one new_session_ticket
tickets, these tickets are expected to have different nonce. On the
other hand a single local_ticket will be provided by the LURK Server.
The TLS Client generates an associated local_ticket for each
new_session_ticket. All of them are generated from the local_ticket
provided by the LURK Server. 

Though the new_Session_ticket and the local_ticket have different
meanings, a TLS Client will not be able to perform session resumption
without the corresponding local_ticket. More specifically, the TLS
Client MUST:

* remove local_tickets and new_session_tickets that have expired
* remove local_tickets that have no associated new_session_tickets
* remove new_session_tickets that have no associated local_tickets
In all these cases, a new handshake will be renegotiated. Note that this
gives the Cryptographic Service the ability to define the maximum time a
new_session_ticket can be used. 


## LURK Server Behavior

Upon receiving a handshake_server_key request, the LURK server proceeds
as follows:

Perfect Forward Secrecy Check is performed as {{hsk-clt}} using the freshness_funct,
and client_random (resp. server_random) as described in {{hsk-clt}}
(resp. {{auth-clt-srv_tls}}).

Transcript-Hash Check, PSKExchangeMode Check,
KeyScheduleInputSecrets Check  are performed as described in {{hsk-srv}}

HandshakeMode Check:

* if the mode is not supported a invalid_handshake_mode error is
returned. This typically prevents a TLS Client to perform computation
expected to happen on the TLS Server, or to distinguish and authorize
client authentication performed during the handshake or post handshake.   

Handshake Check:

* if the hanshake_context does not match the expected handshake context
as defined in {{!RFC8446}} section 4.4. an
invalid_handshake error is returned. 

CertificateVerify Check:

* if ke_mode is set to psk_dhe_ke and the certificate is not supported
 an invalid_certificate error is returned
* if ke_mode is set to psk_dhe_ke and the algorithm is not supported
an invalid_signature_scheme error is returned


Keys are generated as described in {{!RFC8446}}
section 7.1. This includes the Base Key use to generate the Finished
messages as well as the resumption_master_secret.

key_request is indicative and is used by the LURK Client to indicate the
keys that are not necessarily needed in order to save bandwidth. The
LURK Server SHOULD NOT responds with keys whose key_request bit is
unset. 

The CertificateVerify message is generated as described in
{{!RFC8446}} section 4.4.3. 

The Finished message is generated as described in
{{!RFC8446}} section 4.4.4. 

ticket_number indicates the number of NewSessionTicket. ticket_session
have different meaning when used by the TLS Client or the TLS Server.
When the LURK exchange is initiated by the LURK Client, the
ticket_sessions are local_ticket and are only expected to be used
between the LURK Client and the LURK Server. Such local_ticket avoids a
direct communication of the resumption_master_secret.  local_ticket
follows the definition of new_session_tickets described in
{{!RFC8446}} section 4.6.1. The LURK Server MUST have a zero
length ticket_nonce and zero length extensions 

When the LURK exchange is initiated by the TLS Server the tickets are
new_session_tickets as described in {{!RFC8446}} section
4.6.1. As a result:

* if handshake_mode is set to server, the LURK Server SHOULD respond
with a list of new_session_tickets that is not greater than the number
indicated by ticket_number. The number of ticket MAY be defined by the
LURK Server policies. 
* if handshake_mode is set to client or post-handshake the LURK Server
SHOULD respond with a list of local_ticket that is not greater than the
number indicated by ticket_number. The list MUST NOT exceed one
local_ticket.  


# Security Considerations

Security credentials as per say are the private key used to sign the
CertificateVerify when ECDHE authentication is performed as well as the
PSK when PSK or PSK-ECDHE authentication is used. 

The protection of these credentials means that someone gaining access to
the Cryptographic Service MUST NOT be able to use that access from
anything else than the authentication of an TLS being established. In
other way, it MUST NOT leverage this for:
* any operations outside the scope of TLS session establishment.
* any operations on past established TLS sessions
* any operations on future TLS sessions
* any operations on establishing TLS sessions by another LURK client.

The Cryptographic Service outputs are limited to secrets as well as
NewSessionTickets. The design of TLS 1.3 make these output of limited
use outside the scope of TLS 1.3. Signature are signing data specific to
TLS 1.3 that makes the signature facility of limited interest outside
the scope of TLS 1.3. NewSessionTicket are only useful in a context of
TLS 1.3 authentication. 

ECDHE and PSK-ECDHE provides perfect forward secrecy which prevents past
session to be decrypted as long as the secret keys that generated teh
ECDHE share secret are deleted after every TLS handshake. PSK
authentication does not provide perfect forward secrecy and
authentication relies on the PSK remaining sercet. The Cryptographic
Service does not reveal the PSK and instead limits its disclosure to
secrets that are generated from the PSK and hard to be reversed. 

Future session may be impacted if an attacker is able to authenticate a
future session based on what it learns from a current session. ECDHE
authentication relies on cryptographic signature and an ongoing TLS
handshake. The robustness of the signature depends on the signature
scheme and the unpredictability of the TLS Handshake. PSK authentication
relies on not revealing the PSK. The Cryptographic Service does not
reveal the PSK. TLS 1.3 has been designed so secrets generated do not
disclose the PSK as a result, secrets provided by the Cryptographic do
not reveal the PSK. NewSessionTicket reveals the identity (ticket) of a PSK.
NewSessionTickets.ticket are expected to be public data. It value is
bound to the knowledge of the PSK. The Cryptographic does not output any
material that could help generate a PSK - the PSK itself or the
resumption_master_secret. In addition, the Cryptographic only generates
NewSessionTickets for the LURK client that initiates the key schedule
with Cryptographic Service with a specific way to generate ctx_id. This
prevents the leak of NewSessionTickets to an attacker gaining access to
a given Cryptographic Service. 

If an the attacker get the NewSessionTicket, as well as access to the
Cryptographic Service of the TLS client it will be possible to proceed
to the establishment of a TLS session based on the PSK. In this case,
the Cryptographic Service cannot make the distinction between the
legitimate TLS client and teh attacker.  This corresponds to the case
where the TLS client is corrupted. 

Note that when access to the Cryptographic Service on the TLS server
side, a similar attack may be performed. However the limitation to a
single re-use of the NewSessionTicket prevents the TLS server to proceed
to the authentication.  

Attacks related to other TLS sessions are hard by design of TLS 1.3
that ensure a close binding between the TLS Handshake and the generated
secrets. In addition communications between the LURK client and the
Cryptographic Service cannot be derived from an observed TLS handshake
(freshness function). This makes attacks on other TLS sessions unlikely. 

# IANA Considerations

#  Acknowledgments


# Appendix

This section is non normative. It illustrates the use of LURK in various
configurations.  

The TLS client may propose multiple ways to authenticate the
server (ECDHE, PSK or PSK-ECDHE). The TLS server may chose one of those,
and this choice is reflected by the LURK client on the TLS server. In
other words, this decision is out of scope of the Cryptographic Service. 

The derivation of the secrets is detailed in {{!RFC8446)) section 7.1.
Secrets are derived using Transcript-Hash and HKDF, PSK and ECDHE
secrets as well as some Handshake Context.   

The Hash function:
When PSK or PSK-ECDHE authentication is selected, the Hash function is a
parameter associated to the PSK. When ECDHE, the hash function is
defined by the cipher suite algorithm negotiated. Such algorithm is
defined in the cipher_suite extension provided in the ServerHello which
is provided by the LURK client in the first request when ECDHE
authentication is selected. 

PSK secret:
When PSK or PSK-ECDHE authentication is selected, the PSK is the PSK
value identified by the identity. When ECDHE authentication is selected,
the PSK takes a default value of string of Hash.length bytes set to
zeros.
 

ECDHE secret:
When PSK or PSK-ECDHE authentication is selected, the ECDHE secret takes
the default value of a string of Hash.length bytes set to zeros. The
Hash is always known as a parameter associated to the selected PSK. When
ECDHE authentication is selected, the ECDHE secret is generated from the
secret key (ephemeral_sercet) provided by the LURK client and the
counter part public key in the key_share extension. When the LURK client
is on the TLS client, the public key is provided in the ServerHello.
When the LURK client is on the TLS Server, the public key is provided in
the ClientHello. When ECDHE secret is needed, ClientHello...ServerHello
is always provided to the Cryptographic Service.    

Handshake Context:
is a subset of Handshake messages that are necessary to generated the
requested secrets. The various Handshake Contexts are summarized below:

~~~
+------------------------------------+--------------------------------+
| Key Schedule secret or key         | Handshake Context              |
+---------------------------------------------------------------------+
| binder_key                          | None                          |
| client_early_traffic_secret         | ClientHello                   |
| early_exporter_master_secret        | ClientHello                   |
| client_handshake_traffic_secret     | ClientHello...ServerHello     |
| server_handshake_traffic_secret     | ClientHello...ServerHello     |
| client_application_traffic_secret_0 | ClientHello...server Finished |
| server_application_traffic_secret_0 | ClientHello...server Finished |
| exporter_master_secret              | ClientHello...server Finished |
| resumption_master_secret            | ClientHello...client Finished |
+---------------------------------------------------------------------+
~~~


The Cryptographic Service has always the Hash function, the PSK and
ECDHE secrets and the only remaining parameter is the Handshake Context.
The remaining sections will only focus on checking the Handshake Context
available to the Cryptographic Service is sufficient to perform the key
schedule.  

When ECDHE authentication is selected both for the TLS server or the TLS
client, a CertificateVerify structure is generated as described in
{{!RFC8446}} section 4.4.3.. CertificateVerify consists in a signature
over a context that includes the output of Transcript-Hash(Handshake
Context, Certificate) as well as a context string. Both Handshake
Context and context string depends on the Mode which is set to server in
this case via the configuration of the LURK server. Similarly to the key
schedule, the Hash function is defined by the PSK or the ServerHello.
The values for the Handshake Context are represented below: 

~~~
+-----------+-------------------------+-----------------------------+
| Mode      | Handshake Context       | Base Key                    |
+-----------+-------------------------+-----------------------------+
| Server    | ClientHello ... later   | server_handshake_traffic_   |
|           | of EncryptedExtensions/ | secret                      |
|           | CertificateRequest      |                             |
|           |                         |                             |
| Client    | ClientHello ... later   | client_handshake_traffic_   |
|           | of server               | secret                      |
|           | Finished/EndOfEarlyData |                             |
|           |                         |                             |
| Post-     | ClientHello ... client  | client_application_traffic_ |
| Handshake | Finished +              | secret_N                    |
|           | CertificateRequest      |                             |
+-----------+-------------------------+-----------------------------+
~~~

When ECDHE authentication is selected, the Cryptographic Service
generates a Finished message, which is a MAC over the value
Transcript-Hash(Handshake Context, Certificate, CertificateVerify) using
a MAC key derived from the Base Key. As a result, the same Base Key and
Handshake Context are required for its computation describe din
{{!RFC8466}} section 4.4.4..



## TLS 1.3 Full Handshake with ECDHE authentication only, no TLS client authentication 


This example illustrates the case of a TLS handshake where the TLS
server is authenticated using ECDHE only, that is not PSK or PSK-ECDHE
authentication is provided and so session resumption is not provided
either. 

### TLS Client: ClientHello (#sec:ecdhe-no-resumption-client-hello}

The TLS client does not provides any PSK and  omits the pre_shared_key as
well as the psk_key_exchange_mode extensions. Note that omiting the
psk_key_exchange_mode extension prevents the TLS client to perform
further session resumption. 

The TLS client does not need any interaction with the Cryptographic
Service to generate and send the ClientHello message to the TLS server. 

~~~
TLS Client                                   TLS Server

    Key  ^ ClientHello
    Exch | + key_share
         v + signature_algorithms ---------> 
~~~

### TLS Server: ServerHello  (#sec:ecdhe-no-resumption-server-hello}


Upon receiving the ClientHello, the TLS server determines the TLS client
requests an ECDHE authentication. The TLS server initiates a LURK
session to provide ECDHE authentication as represented below: 

~~~
TLS Client                                   TLS Server

                                             ServerHello  ^ Key
                                             + key_share  | Exch
                                   {EncryptedExtensions}  ^  Server
                                   {CertificateRequest*}  v  Params
                                           {Certificate}  ^
                                     {CertificateVerify}  | Auth
                                              {Finished}  v
                          <--------  [Application Data*]
~~~

The LURK client on the TLS server initiates a schedule context (ks_ctx)
and sends an InitCertificateVerifyRequest to the LURK server. As this is
an initial exchange of a LURK session, the context ID ctx_id is set to
init_id. In our example, key_request sets the handshake and application
secrets. handshake_context is set to ClientHello ... later of server
EncryptedExtensions / CertificateRequest. In our case the TLS server
does not intend to authenticate the TLS server, so handshake_context is
set to ClientHello ... EncryptedExtensions. ephemeral_secret is provided
to generate the ECDHE secret, key_id, sig_algo, serctificate are
provided to generate CertificateVerify. 

~~~
TLS Server                      
Lurk Client                              Cryptographic Service
        InitCertificateVerifyRequest
            ctx_id=init_id
            key_request
            handshake_context
            ephemeral_secret
            key_id, 
            sig_algo 
            certificate               -------->
                                         InitCertificateVerifyResponse
                                            keys, certificate_verify
                                   <---------   finished
~~~

The necessary Handshake Context to generate the handshake secrets are
ClientHello...ServerHello  which are provided by the handshake_context.

The generation of the CertificateVerify is described in {{!RFC8446}}
section 4.4.3. and consists in a signature over a context that includes
the output of Transcript-Hash(Handshake Context, Certificate) as well as
a context string. Both Handshake Context and context string depends on
the Mode which is set to server in this case via the configuration of
the LURK server. 

The necessary Handshake Context to generate the CertificateVerify is
ClientHello ... later of EncryptedExtensions / CertificateRequest. In
our case, this is exactly handshake_context, that is ClientHello ...
EncryptedExtensions.   

Once the certificate_verify value has been defined, the LURK server
generates the server Finished message in order to have the necessary
Handshake Context ClientHello...server Finished to generate the
application secrets. 


The LURK server returns the requested keys, the certificate_verify and
the finished message so the TLS server can complete the ServerHello
response.   

As session resumption is not provided, teh LURK server goes into a
finished state and delete the ks_ctx. 

### TLS client: client Finished (#sec:ecdhe-no-resumption-client-finished}

Upon receiving the ServerHello message, the TLS client retrieve the
handshake and application secrets to decrypt the messages receives from
server as well as to encrypt its own messages and application data as
represented below:

~~~
TLS Client                                   TLS Server

      {Finished}              -------->
      [Application Data]      <------->  [Application Data]
~~~



To retrieves these secrets, the TLS client proceeds successively to an
HandshakeSecretRequest followed by a AppSecretRequest. 

~~~
TLS Client                      
Lurk Client                              Cryptographic Service
        HandshakeSecretRequest
            ctx_id=init_id
            key_request
            handshake_context
            ephemeral_secret
            ------->

                                  HandshakeSecretResponse
                           <--------  keys
TLS Client                      
Lurk Client                              Cryptographic Service
        AppSecretRequest
            ctx_id=opaque
            key_request
            handshake_context
            ephemeral_secret
            ------->

                                  AppSecretResponse
                           <--------  keys
~~~

As the HandshakeSecretRequest initiates a session between the LURK
client and the LURK server, the context ID is set to init_id while next
request have their context ID set to opaque. key_request is set to
handshake secrets only. handshake_context is set to ClientHello ...
ServerHello (with ctx_id of type init_id). ephemeral_secret is provided
to the Cryptographic Service to generate the ECDHE sercet. 

The necessary Handshake to generate handshake secrets is
ClientHello...ServerHello which is provided by the handshake_context. 

Upon receiving the HandshakeSecretRequest with a ctx_id type of init_id,
and no PSK provided, the Cryptographic Service initializes a key
schedule context ks_ctx and computes the handshake_secrets from ECHDE,
PSK, Hash function. Since no client authentication is expected, the
next_request is set to app_secret. It thene return the handshake secrets
to the LURK client. 

The TLS client decrypt the encrypted messages of teh ServerHello
exchange. As no CertificateREquest appears, the LURK client initiates a
AppSecretRequest to decrypt and encrypt application data while finishing
the TLS handshake. key_request is limited to the application secrets.
The handshake_context is set to server EncryptedExtensions ... server
Finished.  

Upon receiving the AppSecretRequest, the Cryptographic Service checks
the request is expected by checking the ctx_id and the request type. The
Cryptographic Service has now the ClientHello ... server Finished which
enables it to compute the application secrets. 

As no session resumption is provided, the Cryptographic Service and the
LURK client goes into a finished state and delete their ks_ctx. 

## TLS 1.3 Full Handshake with ECDHE authentication only and session resumtpion, no TLS client authentication  {#sec:ecdhe-resumption}

This scenario considers that the TLS server is authenticated using ECDHE
only in the first time and that further TLS handshake use the session
resumption mechanism. The first TLS Handshake is very similar as the
previous one. The only difference is that psk_key_exchange_mode
extension is added to the ClientHello. However, as no PSK identity is
provided, the Full exchange is performed as described in section
{{(sec:ecdhe-no-resumption}}.  

The only change is that session resumption is activated, and thus LURK
client and LURK servers do not go in a finished state and close the LURK
session after the exchanges are completed. Instead further exchanges are
expected. In the case where session resumption is enabled, the
next_request of the ks_ctx is set to nes_session_request. 



### Full Handshake {#sec:ecdhe-session-resumption-fullhandshake}


The Full TLS Handshake use ECDHE authentication. It is very similar to
the logic described in section {{(sec:ecdhe-no-resumption}}. The TLS
handshake is specified below for convenience. 

~~~
TLS Client                                   TLS Server

    Key  ^ ClientHello
    Exch | + key_share 
         | + psk_key_exchange_mode
         v + signature_algorithms ---------> 
                                             ServerHello  ^ Key
                                             + key_share  | Exch
                                   {EncryptedExtensions}  Server Param
                                           {Certificate}  ^
                                     {CertificateVerify}  | Auth
                                              {Finished}  v
                          <--------  [Application Data*]
      {Finished}              -------->
      [Application Data]      <------->  [Application Data]
~~~

### TLS server: NewSessionTicket {#sec:ecdhe-session-resumption-newsessionticket}

As session resumption has been activated by the psk_key_exchange_mode,
the TLS Server is expected to provid ethe TL Sclient NewSessionTickets
as mentionned below:

~~~
TLS Client                                   TLS Server
                          <--------      [NewSessionTicket]
~~~


The LURK client and  LURK server on the TLS server does not go into a
finished state. Instead, the LURK client continue the LURK session with
a NewSessionTicketRequest to enable the Cryptographic Service to
generate the resumption_master_secret necessary to generate the PSK and
generate a NewTicketSession. ctx_id is of type opaque, ticket_nbr
indicate sthe number of NewSessionTickets and handshake_context is set
to earlier of client Certificate client CertificateVerify ... client
Finished. As we do not consider TLS client authentication, the
handshake_context is set to client Finished as represented below. 

~~~
TLS Server                      
Lurk Client                              Cryptographic Service
        NewSessionTicketRequest
            ctx_id=ctx_id
            ticket_nbr
            handshake_context=client Finished  -------->
                                         NewSessionTicketResponse
                                   <---------   tickets
~~~

The necessary Handshake Context to generate the resumption_master_secret
is ClientHello...client Finished. From the InitCerificateVerify the
context_handshake was set to ClientHello...server Finished. The
additional handshake_context enables the Cryptographic Service to
generate the NewSessionTickets.  

Note that the LURK client on the TLS server may send multiple
NewSessionTicketRequest. Future request have an emptpy
handshake_context.

Upon  receiving the NewSessionTicketRequest, the LURK server checks the
ctx_id as well as if the request type matches the ks_ctx.next_request.
It then generates the resumption_master_secret, NewSessionTickets.
NewSessionTickets are stored into the PSK_DB under
NewSessionTicket.ticket. Note that PSK is associated with the
authentication mode as well as the Hash K server responds with
NewSessionTickets that are then transitted back to the TLS client. The
TLS server is ready for session resumption. 

### TLS client: NewSessionTicket {#sec:ecdhe-session-resumption-newsessionticket}

Similarly, the LURK client on the TLS client will have to provide
sufficient information to the Cryptographic Service the necessary PSK
can be generated in case of session resumption. This includes the
remaining Handshake Context to generate the resumption_master_secret as
well as NewSessionTickets provided by the TLS server. The LURK client
uses the RegisterSessionTicket message. 


Note that the LURK client may provide the handshake_context with an
empty list of NewSessionTickets, and later provide the NewSessionTickets
as they are provided by the TLS server. The Handshake Context only needs
to be provided for the first RegisterSessionTicket. 

~~~
TLS Client                      
Lurk Client                              Cryptographic Service
        NewSessionTicketRequest
            ctx_id=ctx_id
            handshake_context=client Finished  
            ticket_list            -------->
                                         NewSessionTicketResponse
                                   <---------   tickets
~~~


Both TLS client and TLS Servers are ready for further session
resumption. On both side the Cryptographic Service stores the PSK in a
database designated as PSK_DB. Each PSK is associated to a Hash function
as well as authentication modes. Each PSK is designated by an identity.
The identity may be a label, but in our case the identity is derived
from the NewSessionTicket.ticket.    

### Session Resumption {#sec:session-resumption}

Session resumption is initiated by the TLS client. Session resumption is
based on PSK authentication and different PSK may be proposed by the TLS
client. The TLS handshake is presented below.  

~~~
TLS Client                                   TLS Server
       ClientHello
       + key_share
       + psk_key_exchange_mode
       + pre_shared_key          -------->
                                                       ServerHello
                                                  + pre_shared_key
                                                      + key_share
                                             {EncryptedExtensions}
                                                        {Finished}
                                 <--------     [Application Data*]
~~~

The TLS client may propose to the TLS Server multiple PSK. Each of these
PSK is associated a PskBindersEntry defined in {{!RFC8446}} section
4.2.11.2. PskBindersEntry is computed similarly to the Finished message
using the binder_key and the partial ClientHello. 

The TLS server is expected
to pick a single PSK and validate the binder. In case the binder does
not validate the TLS Handshake is aborted. As a result, only one
binder_key is expected to be requested by the TLS server as opposed to
the TLS client. 

In this example we assume the psk_key_exchange_mode indicated the TLS
client supports PSK-ECDHE as well as PSK authentication. The presence of
a pre_shared_key and a key_share extension in the ServerHello inidcates
that PSK-ECDHE has been selected.  


#### TLS client: ClientHello 

To compute binders, the TLS Client needs to request the binder_key
associated to each proposed PSK. These binder_keys are retrieved to the
Cryptographic Service using the BinderKeyRequest. A new ks_ctx is
created thus the ctx_ix is of type init_id which contains the PSK
identity (PSKIdentity.identity or NewSessionTicket.ticket.). key_request
is set to binder_key and the handshake_context is empty.  

~~~
TLS Client                      
Lurk Client                              Cryptographic Service
        BinderKeyRequest
            ctx_id=init
            key_request=binder_key
            handshake_context=""
                                         BinderKeyResponse
                                   <---------   key
~~~

Upon receiving the BinderKeyRequest, the Cryptographic Service checks
the psk is in the PSK_DB initiates a key schedule context (ks_ctx) and
returns binder_key. 

With the binder keys, the TLS Client is able to send it ClientHello
message. Note that the usage of multiple PSK may lead to the creation of
multiple ks_ctx. The LURK client will be able to define which PSK has
been selected by the TLS server, but that information is not provided to
the LURK server. As a result, the LURK server is expected to set a
timeout after which the ks_ctx is deleted. 


#### TLS server: ServerHello

The TLS server is expected to select a PSK, checks the associated binder
and proceed further. If the binder fails, it is not expected to proceed
to another PSK, as a result, the TLS server is expected to initiates a
single LURK session. 

The binder_key is requested by the TLS server via and
EarlySecretRequest. In our case, only the binder_key is requested so
key_request is set to binder_key only. Similarly, to the TLS client, the
handshake_context is not needed to generate the binder_key. However, the
EarlySecret exchange requires the ClientHello to be provided so early
secrets may be computed in the same round during 0-RTT handshake. 

~~~
TLS Server                      
Lurk Client                              Cryptographic Service
        EarlySecretRequest
            ctx_id=init_id
            key_request=binder_key
            handshake_context=ClientHello
                                         EarlySecretResponse
                                   <---------   key
~~~

To complete to the ServerHello exchange, the TLS server
needs the handshake and application secrets. These secrets are requested
via an HandshakeAndAppSecret. ctx_id is of type opaque and the
handshake_context is set to ServerHello ... later of server
EncryptedExtensions / CertificateRequest. In our case, this the
handshake_context is set to ServerHello ... EncryptedExtensions. 

The necessary Handshake Context to generate the handshake secrets is
ClientHello ... ServerHello, so the Cryptographic Service can generate
the handshake secrets. The necessary handshake context to generate the
application secrets is ClientHello ... server Finished. So the
Cryptographic Service needs to generate the Finished message before as
in the case of the InitCerificateVerify exchange  detailled in
{{sec:ecdhe-session-resumption-fullhandshake}}.  


~~~
TLS Server                      
Lurk Client                              Cryptographic Service
        HandshakeAndAppRequest
            ctx_id=ctx_id
            key_request
            handshake_context
            ephemeral_secret          -------->
                                         HandshakeAndAppResponse
                                            keys, finished
                                   <---------   finished
~~~

The Cryptographic Service returns the necessary secret to the TLS server
to complete the ServerHello response. 

The remaining of the TLS handshake is proceeded similarly as described
in the Full Handshake in section {{sec:ecdhe-resumption}}.  



## 0-RTT handsahke

The 0-RTT Handshake is a PSK or PSK-ECDHE authentication that enables
the TLS client to provide application data during the first round trip.
The main differences to the PSK PSK-ECDHE authentication described in
the case of session resumption is that:

* Application Data is encrypted in the ClientHello based on the
client_early_secret
* Generation of the client_early_secret requires the Cryptographic
Service to be provisioned with the ClientHello which does not need to be
re-provisioned later to generate the handshake secrets 
* An additional message EndOfEarlyData needs to be considered to compute
the client Finished message.   

~~~
TLS Client                                   TLS Server

       ClientHello
       + early_data
       + key_share*
       + psk_key_exchange_modes
       + pre_shared_key
       (Application Data*)     -------->
                                                       ServerHello
                                                  + pre_shared_key
                                                      + key_share*
                                             {EncryptedExtensions}
                                                     + early_data
                                                        {Finished}
                               <--------       [Application Data*]
       (EndOfEarlyData)
       {Finished}              -------->
       [Application Data]      <------->        [Application Data]
~~~

### TLS client: ClientHello

With 0-RTT handshake, the TLS client builds binders as in session
resumption described in section {{sec:session-resumption}}. The
binder_key is retrieved for each proposed PSK with a BinderKeyRequest.
When early application data is sent it is encrypted using the
client_early_traffic_secret. This secret is retrieved using the
EarlySecretRequest. The ctx_id type is set to opaque as the ks_ctx has
already been established by the BinderKeyRequest. The key_request is set
to client_early_traffic_secret and the handshake_context is set to
ClientHello. 

When multiple PSK are proposed by the TLS client, the first proposed PSK
is used to encrypt the application data.

~~~
TLS Client                      
Lurk Client                              Cryptographic Service
        EarlySecretRequest
            ctx_id=opaque
            key_request=client_early_traffic_secret
            handshake_context=ClientHello
                                         EarlySecretResponse
                                   <---------   keys=client_early_traffic_secret
~~~

Upon receiving the EarlySecretRequest, the Cryptographic Service
generate the client_early_traffic_secret. The Cryptographic checks the
ctx_id and the request type against the ks_ctx.next_request before
generating the early secret. 

The TLS client is able to send its ClientHello with associated binders
and application data.  

### TLS server: ServerHello

If the TLS server accepts the early data. It proceeds as described in session
resumption described in section {{sec:session-resumption}}. In addition
to the binder_key, the TLS server also request the client_early_traffic_secret
to decrypt the early data as well as to proceed to teh ServerHello
exchange.


### TLS client: Finished

The TLS client proceeds as described in handshake based on ECDHE, PSK or
PSK-ECDHE authentications described in
{{sec:ecdhe-no-session-resumption}} and
{{sec:ecdhe-session-resumption}}. The main difference is that upon
requesting handshake and application secrets, using an HandshakeRequest
the TLS client will not provide the ClientHello as part as the
handshake_context. The Client as already been provided during the
EarlySercret exchange. 


## TLS client authentication

TLS client authentication can be performed during the Full TLS handshake
or after the TLS handshake as a post handshake authentication. In both
cases, the TLS client authentication is initiated by the TLS server
sending a CertificateRequest. The authentication is performed via a
CertificateVerify message generated by the TLS client but such
verification does not involve the Cryptographic Service on the TLS
server. 

## TLS Client:Finished (CertificateRequest) 

The ServerHello MAY carry a CertificateRequest encrypted with the
handshake sercets. 

Upon receiving the ServerHello response, the TLS client decrypts the
ServerHello response. If a CertificateRequest message is found, the TLS
Client requests the Cryptographic to compute the CertificateVerify in
additional to the application secrets via a CertificateVerifyRequest.
The ctx_id is of type opaque, the key_request are set to the application
secrets and the handshake_context is set to server EncryptedExtensions
... later of server Finished/EndOfEarlyData. As the resquest follows a
(BinderKey, EarlySecret, HandshakeSecret) or HandshakeSecret the
Handshake Context on the Cryptographic Service now becomes: ClientHello
... later of server Finished/EndOfEarlyData which is the Handshake
Context required to generate the CertificateVerify on the TLS client
side and includes the Handshake Context required to generate the
application secrets (ClientHello...server Finished).  


~~~
TLS Client                      
Lurk Client                              Cryptographic Service
        CertificateVerifyRequest
            ctx_id=opaque
            key_request
            handshake_context
                                         CertificateVerifyResponse
                                   <---------   keys, certificate_verify
~~~

Upon receiving the EarlySecretRequest, the Cryptographic Service checks
the ctx_id and ks_ctx.next_request matches the incoming request,
generates secrets and certificate_verify data. The ks_ctx.next_request
is updated to [register_session_tickets, post_handshake].  


## TLS Client Authentication (PostHandshake)

When post-handshake is enabled by the TLS client, the TLS client may
receive at any time after the handshake a CertificateRequest message.
When post handshake is enabled by the TLS client, as soon as the client
Finished message has been sent, the TLS client sends a
RegisteredNewSessionTicketRequest with an empty NewSessionTicket to register
the remaining Handshake Context to the Cryptographic Service. ctx_id is
set to opaque, handshake_context is set to earlier of client Certificate
client CertificateVerify ... client Finished.

Upon receiving the RegisteredNewSessionTicketsRequest the Cryptographic
is aware of the full Handshake Context.
It updates ks_ctx.next_request
to [post_handshake, register_session_ticket].

~~~
TLS Client                      
Lurk Client                              Cryptographic Service
        RegisteredNewSessionTicketRequest
            ctx_id=opaque
            handshake_context
            ticket_list (empty)
                  <--------- RegisteredNewSessionTicketResponse
~~~

When the TLS client receives a CertificateRequest message from the TLS
server, the TLS client sends a PostHandshakeRequest to teh Cryptographic
Service to generate certificate_verify.ctx_id is of type opaque and teh
handshake_context is set to CertificateRequest. The
index N of the client_application_traffic_N key is provided as well as the
Cryptographic so it can generate the appropriated key. 

~~~
TLS Client                      
Lurk Client                              Cryptographic Service
        PostHandshakeRequest
            ctx_id=opaque
            handshake_context=CertificateRequest
            app_n=N
                                         PostHandshakeResponse
                                   <---------   certificate_verify
~~~

Upon receiving the PostHandshakeRequest the Cryptographic Service checks
ctx_id and match the request to ks_ctx.next_request. The necessary
Handshake Context to generate the certificate_verify is ClientHello ...
client Finished + CertificateRequest. Once the PostHandshakeResponse has
been sent, it updates ks_ctx.next_request to [post_handshake,
register_session_ticket].

